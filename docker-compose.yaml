services:
  app:
    image: pass-manager-svc
    container_name: pass-manager-svc
    env_file:
      - .env
    environment:
      MONGODB_PORT: ${MONGODB_PORT}
      MONGODB_HOST: ${MONGODB_HOST}
      MONGODB_DATABASE: ${MONGODB_DATABASE}
      MONGODB_USER: ${MONGO_INITDB_ROOT_USERNAME}
      MONGODB_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      NATS_CONNECTION_URI: ${NATS_CONNECTION_URI}
    ports:
      - "8081:8081"
    depends_on:
      - mongo
    networks:
      - backend
    profiles: [ dev ]

  gateway:
    image: gateway
    container_name: gateway
    env_file:
      - .env
    environment:
      NATS_CONNECTION_URI: ${NATS_CONNECTION_URI}
    ports:
      - "8080:8080"
    networks:
      - backend
    profiles: [ dev ]

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - db_data:/data/db
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 3s
      timeout: 3s
      retries: 3
    profiles: [ dev ]

  nats:
    container_name: nats-server
    image: nats
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - backend
    profiles: [ dev, test ]

  mongo-test:
    image: mongo
    restart: always
    container_name: testable_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: test
    ports:
      - "27017:27017"
    profiles: [ test ]

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    profiles: [ dev, test ]

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    profiles: [ dev, test ]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    profiles: [ dev ]

volumes:
  db_data:

networks:
  backend:
    driver: bridge
